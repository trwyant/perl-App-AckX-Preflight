0.000_038	2022-02-04	T. R. Wyant
    Update copyright to 2022.

    Fixed missed cargo-cult no_index.  That is, did it with no_index
    metadata, not with a line break between the 'package' keyword and
    the name of the package.

0.000_037	2021-07-11	T. R. Wyant
    Tweak 'no_index' and 'provides' metadata. Again.

0.000_036	2021-07-06	T. R. Wyant
    Tweak 'no_index' and 'provides' in metadata.

0.000_035	2021-07-02	T. R. Wyant
    Correct generation of 'provides' metadata.  Thanks to Favio Poletti
    for blogging
    https://github.polettix.it/ETOOBUSY/2021/06/15/the-real-pause-workaround/,
    and ultimately to Joel Berger for the pointer to
    https://metacpan.org/pod/CPAN::Meta::Spec#no_index

0.000_034	2021-03-22	T. R. Wyant
    Add rt.cpan.org back to bug reporting methods. Long live RT!

0.000_033	2021-02-19	T. R. Wyant
    Add add_to_cleanup() and version_from() to inc/My/Module/Meta.pm,
    etc

0.000_032	2021-02-13	T. R. Wyant
    Update xt/author/prereq.t to cover configuration.

0.000_031	2021-02-07	T. R. Wyant
    Update xt/author/prereq.t to detect unused prereq

    Remove private pkgs from xt/author/prereq.t since Test::Prereq::Meta
    now finds them on its own.

    Remove inc/ stuff from xt/author/prereq.t since Test::Prereq::Meta
    now finds it on its own.

0.000_030	2021-01-21	T. R. Wyant
    Get prerequisites up to snuff and add xt/author/prereq.t to ensure
    they stay that way.

0.000_029	2021-01-02	T. R. Wyant
    Add Travis CI testing.

    Report bugs to GitHub. R.I.P. rt.cpan.org

0.000_028	2020-05-26	T. R. Wyant
    Add --syntax-empty-code-is-comment. Normally empty lines are
    considered part of the syntax in which they are embedded. If this
    Boolean option is asserted, empty code lines are considered
    comments.

0.000_027	2020-05-18	T. R. Wyant
    Add --syntax-wc-only to suppress file output.

    Add --syntax-match. If --match-type or --match-wc is present, this
    causes the Syntax plug-in to generate --match '(?)' if no --match
    option was specified on the command line.

    Add option --syntax-wc to the syntax plug-in.

    Add all_modules_tried_ok to t/basic.t

    Add ProhibitEmptyAlternatives to auth perlcriticrc

0.000_026	2020-02-03	T. R. Wyant

    Fix tools/squash for older Perls. The problem was that I was trying
    to define a constant in someone else's name space. Newer constant.pm
    modules accept a fully-qualified name, but older ones do not.

    Convert testing to Test2::V0 and Test2::Tools::LoadModule.

    Suppress warning when ackxp-standalone uses ack, not ack-standalone.

    Eliminate redirections in POD URL links

0.000_025	2019-08-10	T. R. Wyant
    Add Python syntax.

    Regenerate ackxp-standalone on App::Ack install as well as if it
    does not exist.

    Include eg/ and tools/ in POD link check.

0.000_024	2019-06-10	T. R. Wyant
    Fix broken POD links and add test to ensure they stay fixed.

    Update embedded File::Which

0.000_023	2019-02-25	T. R. Wyant
    Fix typos.

0.000_022	2018-08-30	T. R. Wyant
    Add the ::Expand plug-in. This essentially allows the user-specified
    expansion of options to other options and arguments.

0.000_021	2018-07-17	T. R. Wyant
    Fix output of --help config. It was missing the newline at the end.

0.000_020	2018-07-17	T. R. Wyant
    Recode --help to work as documented
    
    Flesh out help documentation, and centralize option and
    config docs in script/ackxp.

    Ensure tests ignore environment.

0.000_019	2018-07-16	T. R. Wyant
    Add --file-extended to File plug-in. This allows for extended
    syntax, which means that empty lines and comments are ignored.

    Add support for building a standalone ackxp.

    Remove the FilesFrom plug-in.

    Add the following built-in file types to the Cpp syntax filter:
    - .h
    - .hh
    - .js
    - .kotlin
    - .sass
    - .stylus

    Add the following built-in file types to the Perl syntax filter:
    - .parrot

    Add the following syntax filters:
    - Asm (.asm, .s)
    - Lua
    - Ocaml

0.000_018	2018-06-03	T. R. Wyant
    Take the FilesFrom plugin out of service.
    
    There is some cleanup to do once it is gone.

    Add ::Syntax::Pascal for delphi and pascal even though 'pascal' is
    not a standard ack file type.

    Add .less files to ::Syntax::Cc because it is a variant on .css,
    which uses C's comment rules.

    Add groovy to ::Syntax::Java since Apache Groovy is a variant on
    Java, with the same comment, doc, and annotation rules.

    Remove actionscript, cpp, and objc which were mistakenly left in when
    this class was split off from ::Syntax::Cpp.

    Add dart to ::Syntax::Cpp because it has the same comment syntax.

0.000_017	2018-06-02	T. R. Wyant
    Make work with Ack 3
    
    The issues here were:
    - The Ack 2 class App::Ack::Resource was renamed to App::Ack::File;
    - The syntax tests needed to know which class to instantiate;
    - For some reason Ack 3 likes to call App::Ack::File->reset(), whereas
      Ack 2 appears not to want to call the App::Ack::Resource->reset(). At
      least that is how I interpret the fact that this code worked with Ack
      2 before I provided a SEEK method in App::AckX::Preflight::Syntax. The
      PerlIO::via documentation says that unless you provide this a seek()
      is an error, and I was no getting them under Ack 2. TELL was also
      provided, on general principles.

    Fix eg/syntax for syntax refactor. Forgot to eliminate
    -MApp::AckX::Preflight::Resource

0.000_016	2018-05-31	T. R. Wyant
    Renormalize syntax filters
    
    * No longer reimplement App::Ack::Resource->open(). Instead use it
      always, and then use binmode to inject ourselves if needed.
    * Syntax filters now decide whether they match App::Ack::Resource
      objects.
    * Move resource open hot-patch to App::AckX::Preflight::Syntax.
    * Eliminate App::AckX::Preflight::Resource.

0.000_015	2018-05-30	T. R. Wyant
    Add syntax filters:
    - batch (.bat)
    - go (added to App::AckX::Preflight::Syntax::Cpp)
    - haskell
    - objcpp (added to App::AckX::Preflight::Syntax::Cpp)
    - swift

    Add eg/syntax.

    tools/number now accepts a file name as an argument.

    tools/syntax-filters now has a --[no]env option, which it passes to
    ack.

0.000_014	2018-05-17	T. R. Wyant
    Add syntax filters for:
    - csharp
    - lisp (including clojure, elisp, and scheme)
    - python
    - tcl

    Refactor syntax filters

    Add syntax filter option --syntax-type, which prepends the syntax
    type to the line.

    Add syntax type 'metadata'. This has been taken to cover:
    - shebang lines;
    - Perl '#line ...', '__DATA__' and '__END__';
    - Java annotations.

0.000_013	2018-05-15	T. R. Wyant
    Remove obsolete plug-ins from t/basic.t

0.000_012	2018-05-14	T. R. Wyant
    Remove obsolete ::Plugin::PerlFile, ::Syntax::Java

    Properly handle single-line C-style block comments

    Add actionscript to Cpp syntax filter.

    Add syntax filter for Ada.

    Documented that Fortran filter calls 'D' code

0.000_011	2018-05-12	T. R. Wyant
    Process config files _before_ parsing cmd line.

    Add Boolean -files-from-filter to FilesFrom plugin

0.000_010	2018-05-12	T. R. Wyant
    Add syntax filters for:
    - Fortran
    - Makefile
    - JSON
    - Vimscript
    - YAML

    Rename ::Syntax::Java to ::Cpp The old module is still around, but
    IN_SERVICE returns false.

0.000_009	2018-05-08	T. R. Wyant
    Keep ::Plugin::File from wrongly using --literal.

    Add syntax filters for C and SQL.

    Add C++ ('cpp') as a file type for the Java syntax filter.

    Add .t ('perltest') as a file type for the Perl syntax filter. It
    may be redundant, but it is also relevant.

    Make file types processed by syntax filters configurable.
    This is done with command-line options analogous to file type
    definition, to wit:
	--syntax-add=Filter:file-type...
	    adds the file types to the filter;
	--syntax-del=Filter:file-type...
	    removes the file types from the filter;
	--syntax-set=Filter:file-type...
	    replaces all file types for the filter
    The Filter argument is for App::AckX::Preflight::Syntax, and is omitted
    if called directly on the filter.

    Add --verbose to App::AckX::Preflight->run().  At the moment this
    writes the generated command to standard error.  But the
    documentation makes no commitments.

0.000_008	2018-05-06	T. R. Wyant
    Replace PerlFile plugin with generic Syntax plugin, supported by
    PerlIO::via classes for each implemented language.  The idea is that
    the kinds of things that get looked for are generic: code, comments,
    documentation, data, and (potentially) other.

    This was a fairly significant change that included:
    - Ditching ::via::PerlFile in favor of ::Syntax::Perl
    - Adding ::Syntax::Java and ::Syntax::Shell, more or less to
      sanity-test the system.

0.000_007	2018-05-03	T. R. Wyant
    Add the PerlFile plugin. This supports options -perl-code and
    -perl-pod, which causes only those portions of a Perl file to be
    searched. This is accomplished by having a PerlIO::via object filter
    out the unwanted lines. I had to hot-patch the App::Ack::Resource
    open() method to get this loaded.

    Handle inverted types (e.g. --noperl).

    Recognize -x as synonym of --files-from

0.000_006	2018-04-25	T. R. Wyant
    Bump Getopt::Long requirement to 2.39.  This is needed to get
    Getopt::Long::Parser->getoptionsfromarray().

0.000_005	2018-04-06	T. R. Wyant
    Remove Manifest plug-in. This was superseded by FilesFrom.

    Add run() options --disable, --enable. These either disable or
    enable plug-ins. Plug-in name may be given either with or without
    the 'App::AckX::Preflight::Plugin::' prefix. You can not specify an
    unknown plugin, and --enable will not enable an unavailable plugin.

    Move _file_id() to ::Util (as __file_id()). This because I thought I
    saw another use for it, though I may be wrong.

    Add --relative for plugin ::FilesFrom.  This causes names relative
    to the location of the file to be made relative to the current
    directory.

    Disable ::FilesFrom MANIFEST funct on --nomanifest. That is,
    something like
      ackxp --nomanifest --files-from MANIFEST -w Fubar
    causes the MANIFEST file to be read directly, instead of via
    ExtUtils::Manifest::maniread().

0.000_004	2018-03-17	T. R. Wyant
    Make File plugin syntax more like grep.

    Support --literal/-Q in File plugin.

    Add plugin FilesFrom, which supersedes Manifest.

    Add plug-in IN_SERVICE manifest constant. This is actually used as a
    method, and is set false by the plug-in's author to take the plug-in
    out of service when it is to be replaced by a plug-in having a
    different name.

    Add Util:: __err_exclusive() for exclusive options. This takes the
    names of the two (and only two!) exclusive options, and calls
    __die() with an appropriate message.

0.000_003	2018-03-15	T. R. Wyant
    Add --ack-filters, so they can be disabled using --no-ack-filters.
    This defaults to __filter_available(). Its anticipated use is to
    bypass this functionality if it turns out to be broken.

    Use actual argument parsing for filter set-up. The previous code
    hand-rummaged through @ARGV.

    Also make ::Util::__getopt() use getoptionsfromarray(), with a reference
    to an array being the optional first argument. This saves at least some
    of the localization of @ARGV. Whether that's worth doing I don't know,
    but I did it.

    Process type definitions on the command line.

    Add eg/README, mv eg/ACKX{,P}-REF

0.000_002	2018-03-14	T. R. Wyant
    Add --help, with optional arguments: 'config' for config sources;
    'plugins' to list plugins, and plugin name for help on that plugin.

    Move option processing code to ::Util.

    Add plug-in method __peek_opt(). This is like __options(), but any
    options found are NOT removed from @ARGV.

    Add the Manifest plug-in, which searches the files found in the
    MANIFEST file. This supports type processing if it is available.

    Add App::AckX::Preflight methods __filter_available() and
    __filter_files(). The former returns a Boolean true if
    App::Ack-style file filtering is available to plugins, and false if
    not. The latter actually filters a list of input files, returning
    those that match. If filtering is not available, __filter_files()
    just returns its arguments.

    Go to object-oriented calls for plugin methods. Provide a plugin
    superclass, but this is not needed as long as the plugin conforms to
    the interface.

    Ensure script/ackxp is installed.

    Subclass App::AckX::Preflight for testing, as an alternative to
    hammering varous subroutines.

    Consider all instances of --env/--noenv, not just '--noenv' itself.

    Move common code to ::Util

    Add support for configuration files. These are modeled after ack's,
    but the names are variants on 'ackxprc'.

    Martial plugins based on the last (right-most) relevant option, not
    the first. Also consider negated options.


0.000_001	2018-03-08	T. R. Wyant
    Initial commit.
