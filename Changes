0.000_005	2018-04-06	T. R. Wyant
    Remove Manifest plug-in. This was superseded by FilesFrom.

    Add run() options --disable, --enable. These either disable or
    enable plug-ins. Plug-in name may be given either with or without
    the 'App::AckX::Preflight::Plugin::' prefix. You can not specify an
    unknown plugin, and --enable will not enable an unavailable plugin.

    Move _file_id() to ::Util (as __file_id()). This because I thought I
    saw another use for it, though I may be wrong.

    Add --relative for plugin ::FilesFrom.  This causes names relative
    to the location of the file to be made relative to the current
    directory.

    Disable ::FilesFrom MANIFEST funct on --nomanifest. That is,
    something like
      ackxp --nomanifest --files-from MANIFEST -w Fubar
    causes the MANIFEST file to be read directly, instead of via
    ExtUtils::Manifest::maniread().

0.000_004	2018-03-17	T. R. Wyant
    Make File plugin syntax more like grep.

    Support --literal/-Q in File plugin.

    Add plugin FilesFrom, which supersedes Manifest.

    Add plug-in IN_SERVICE manifest constant. This is actually used as a
    method, and is set false by the plug-in's author to take the plug-in
    out of service when it is to be replaced by a plug-in having a
    different name.

    Add Util:: __err_exclusive() for exclusive options. This takes the
    names of the two (and only two!) exclusive options, and calls
    __die() with an appropriate message.

0.000_003	2018-03-15	T. R. Wyant
    Add --ack-filters, so they can be disabled using --no-ack-filters.
    This defaults to __filter_available(). Its anticipated use is to
    bypass this functionality if it turns out to be broken.

    Use actual argument parsing for filter set-up. The previous code
    hand-rummaged through @ARGV.

    Also make ::Util::__getopt() use getoptionsfromarray(), with a reference
    to an array being the optional first argument. This saves at least some
    of the localization of @ARGV. Whether that's worth doing I don't know,
    but I did it.

    Process type definitions on the command line.

    Add eg/README, mv eg/ACKX{,P}-REF

0.000_002	2018-03-14	T. R. Wyant
    Add --help, with optional arguments: 'config' for config sources;
    'plugins' to list plugins, and plugin name for help on that plugin.

    Move option processing code to ::Util.

    Add plug-in method __peek_opt(). This is like __options(), but any
    options found are NOT removed from @ARGV.

    Add the Manifest plug-in, which searches the files found in the
    MANIFEST file. This supports type processing if it is available.

    Add App::AckX::Preflight methods __filter_available() and
    __filter_files(). The former returns a Boolean true if
    App::Ack-style file filtering is available to plugins, and false if
    not. The latter actually filters a list of input files, returning
    those that match. If filtering is not available, __filter_files()
    just returns its arguments.

    Go to object-oriented calls for plugin methods. Provide a plugin
    superclass, but this is not needed as long as the plugin conforms to
    the interface.

    Ensure script/ackxp is installed.

    Subclass App::AckX::Preflight for testing, as an alternative to
    hammering varous subroutines.

    Consider all instances of --env/--noenv, not just '--noenv' itself.

    Move common code to ::Util

    Add support for configuration files. These are modeled after ack's,
    but the names are variants on 'ackxprc'.

    Martial plugins based on the last (right-most) relevant option, not
    the first. Also consider negated options.


0.000_001	2018-03-08	T. R. Wyant
    Initial commit.
