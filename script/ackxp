#!/usr/bin/env perl

use 5.010001;

use strict;
use warnings;

use App::AckX::Preflight;

our $VERSION = '0.000_047';

use constant PREFLIGHT	=> 'App::AckX::Preflight';

use constant DISPATCH	=> PREFLIGHT->IS_WINDOWS() ?
    PREFLIGHT->DISPATCH_SYSTEM() :
    PREFLIGHT->DISPATCH_EXEC();

App::AckX::Preflight->new(
    dispatch	=> DISPATCH,
)->run();

__END__

=head1 TITLE

ackxp - Ad-hoc preflight munging of F<ack>'s arguments.

=head1 SYNOPSIS

 ackxp -w foo
 ackxp -help
 ackxp -version

=head1 OPTIONS

The following options are interpreted directly. Others may be
interpreted by plug-ins or by F<ack>. See the relevant documentation for

=head2 --ackxprc

 --ackxprc=extra_ackxp_resource_file

This option specifies an F<ackxp> resource file. This is in addition to,
not in replacement of, the global, default, or project files.

By default there is none. See the L<CONFIGURATION|/CONFIGURATION>
documentation for what files may be processed, and

 ackxp --help config

for what files are actually processed.

=head2 --default

 --default perldoc=--syntax=doc

This option specifies default options (sic!) for plugins. The argument
is the name of the plugin (typically the last portion of the class name,
converted to lower case), an equals sign, and the default arguments to
be applied if that plugin is to be used.

If the value for a plugin is used, it will be parsed by
L<Text::ParseWords::shellwords()|Text::ParseWords>, and then by
L<Getopt::Long>. Any options found will be applied to the appropriate
plugin provided that option was not specified explicitly.

This option is really only useful in a configuration file.

=head2 --disable

 --disable=plugin_name

This option disables the named plugin. The name is either the complete
class name or the name without the C<'App::AckX::Preflight::Plugin::'>
prefix.

An exception occurs if the name of an unknown plugin is given.

=head2 --dry-run

If this Boolean option is asserted,
L<App::AckX::Preflight|App::AckX::Preflight> exits at the point where it
would otherwise execute F<ack>.

If this option is asserted, the L<--verbose|/--verbose> option defaults
to C<--verbose>.

The default is C<--no-dry-run>.

=head2 --enable

 --enable=plugin_name

This option enables the named plug-in. That is, it undoes a previous
C<--disable>; specifying this will not make an unavailable plug-in
available. The name is either the complete class name or the name
without the C<'App::AckX::Preflight::Plugin::'> prefix.

An exception occurs if the name of an unknown plugin is given.

=head2 --env

This Boolean option requests the use of the environment (i.e.
environment variables, configuration files) to configure
C<App::AckX::Preflight>. This option is passed on to F<ack> itself.

The default is C<--env>, but this can be negated with C<--noenv>.

=begin comment

=head2 --exec

If this Boolean option is true, F<ack> is run via C<exec()>. If not, it
is run via C<system()>.

The default is the corresponding object attribute, which itself defaults
to false.

This option is commented out because I consider it of interest to
developers only. The F<script/ackxp> script defaults this to true, but
it can be turned off for troubleshooting with C<--no-exec>.

=end comment

=head2 --help

This option causes the POD of the top-level script (as determined by
C<$0>) to be displayed. The script then exits.

This option can also be given one of the following arguments:

=over

=item C<'config'>

This argument causes the names of any configuration files used to be
displayed. Command options that affect this are taken into account, even
if they occur after C<--help>.

=item C<'plugins'>

This argument causes the names of any available plugins to be displayed.

=item plugin name

If this argument is an item from the plugins list, the POD for that
plugin will be displayed.

=back

All other arguments to C<--help> are invalid and result in an error.

=head2 --ignore-ackxp-defaults

If asserted, this Boolean option causes the built-in defaults to be
ignored.

At the moment this does nothing because there are no built-in defaults.
But if it ever gets any, this will cause them to be ignored.

The default is C<--no-ignore-ackxp-defaults>.

=head2 --man

This is a synonym for C<--help>, and takes the same optional arguments.

=head2 --OUT

 --OUT search.log

This option specifies an output file for the search results. This is
implemented without using shell redirection. If you explicitly specify
C<'-'>, output is unaffected.

This option would have been called C<--output>, but F<ack> had already
claimed both that and C<-o> for something else.

=head2 --output-encoding

 --output-encoding=utf-8

Specify the output encoding. You can use C<--output-encoding=> to
explicitly specify no encoding.

=head2 --verbose

This causes C<App::AckX::Preflight> to write certain information to
standard error. The exact nature of this information is undocumented,
and subject to change without notice.

The default is the value of L<--dry-run|/--dry-run>.

=head2 --version

This option causes the versions of C<App::AckX::Preflight>,
L<App::Ack|App::Ack>, and Perl to be displayed. The script then exits.

=head1 DETAILS

This Perl script simply loads
L<App::AckX::Preflight|App::AckX::Preflight> and calls its
L<run()|App::AckX::Preflight/run> method. This method loads whatever
plugins are installed, and calls them to modify the command arguments as
they see fit. Then it passes control to the F<ack> script.

No, none of this makes F<ack> do anything it would not have done before.
But it can come close. A plug-in could do something like load patterns
from a file, or restrict the search to files whose names appear in a
F<MANIFEST>. At this level it's really an exercise in imagination.

=head1 CONFIGURATION

The configuration system mirrors that of L<App::Ack|App::Ack> itself, as
nearly as I can manage. The only known difference is support for VMS.
Any other differences will be resolved in favor of L<App::Ack|App::Ack>.

Like L<App::Ack|App::Ack>'s configuration system,
C<App::AckX::Preflight>'s configuration is simply a list of default
command line options to be prepended to the command line. Options
specific to C<App::AckX::Preflight> will be removed before the command
line is presented to F<ack>.

The Configuration comes from the following sources, in order from
most-general to most-specific. If an option is specified more than once,
the most-specific one rules. It is probably a 'feature' (in the sense of
'documented bug') that C<App::AckX::Preflight> configuration data trumps
L<App::Ack|App::Ack> configuration data.

=over

=item Global configuration file.

This optional file is named F<ackxprc>, and lives in the directory
reported by the L<App::AckX::Preflight|App::AckX::Preflight>
L<global()|App::AckX::Preflight/global> method.

This configuration file is ignored if C<--noenv> is specified.

=item User-specific configuration file.

If environment variable C<ACKXPRC> exists and is non-empty, it points to
the user-specific configuration file, which must exist.

Otherwise this optional file is whichever of F<.ackxprc> or F<_ackxprc>
actually exists in the user's home directory. It is an error if both
exist.

This configuration file is ignored if C<--noenv> is specified.

=item Project-specific configuration file.

This optional file is the first of F<.ackxprc> or F<_ackxprc> found by
walking up the directory tree from the current directory. It is an error
if both files are found in the same directory.

This configuration file is ignored if C<--noenv> is specified.

=item Configuration file specified by C<--ackxprc>

If this option is specified, the file must exist.

=item The contents of environment variable C<ACKXP_OPTIONS>

This optional environment variable will be parsed by
C<Text::Parsewords::shellwords()>.

This environment variable is ignored if C<--noenv> is specified.

=back

If a configuration source is found more than once, the most-general
occurrence is the one used. One could argue that it should be the
most-specific, but most-general is what F<ack> implements.

For example: if working on code under a user's home directory, the
user-specific file will also be found by the scan for the
project-specific file. In this case the file will be treated as a
user-specific file.

=head1 AUTHOR

Thomas R. Wyant, III F<wyant at cpan dot org>

=head1 COPYRIGHT AND LICENSE

Copyright (C) 2018-2023 by Thomas R. Wyant, III

This program is free software; you can redistribute it and/or modify it
under the same terms as Perl 5.10.0. For more details, see the full text
of the licenses in the directory LICENSES.

This program is distributed in the hope that it will be useful, but
without any warranty; without even the implied warranty of
merchantability or fitness for a particular purpose.

=cut

# ex: set textwidth=72 :
