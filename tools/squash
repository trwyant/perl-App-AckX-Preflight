#!/usr/bin/env perl

use 5.008008;

use strict;
use warnings;

BEGIN {
    -d 'inc'
	and push @INC, 'inc';
}

use App::AckX::Preflight::Util ();
use Fcntl qw{ :mode };
use Getopt::Long 2.33 qw{ :config auto_version };
use Pod::Usage;

our $VERSION = '0.000_022';

my %opt = (
    o	=> '-',
);

GetOptions( \%opt,
    qw{ o=s },
    help => sub { pod2usage( { -verbose => 2 } ) },
) or pod2usage( { -verbose => 0 } );

if ( { '-' => 1, '' => 1 }->{$opt{o}} ) {
    delete $opt{o};
    binmode STDOUT, ':encoding(utf-8)';
} else {
    open my $fh, '>:encoding(utf-8)', $opt{o}
	or die "Failed to open $opt{o}: $!\n";
    select $fh;
}

my $ack = @ARGV ? shift @ARGV : do {
    require File::Which;
    File::Which::which( 'ack-standalone' ) || File::Which::which( 'ack' ) ||
	die "Location of ack not specified, and default not found\n";
};

my @modules;
{
    my %priority = map { $_ => 1 } qw{ App::AckX::Preflight::Util };

    foreach my $m ( @App::AckX::Preflight::Util::CARP_NOT ) {
	if ( $priority{$m} ) {
	    unshift @modules, $m;
	} else {
	    push @modules, $m;
	}
    }
}

print <<'EOD';
#!/usr/bin/env perl
#
# This file is generated code. Please do not edit it or send patches for
# it.
#

package main;

use strict;
use warnings;

use constant 'App::AckX::Preflight::Util::IS_SINGLE_FILE' => 1;

App::AckX::Preflight->run();

EOD

{
    warn "Processing $ack\n";
    local $/ = undef;
    open my $fh, '<', $ack
	or die "Unable to open $ack: $!\n";
    print <$fh>;
    close $fh;
}

{
    # It is critical that the modules be loaded into the single file in
    # the correct order. Fortunately this can be derived from their
    # names. Objectively this is sheer ad-hocery, but on the other hand
    # if it breaks I know who to talk to.
    foreach my $module (
	map { $_->[0] }
	sort { $a->[1] cmp $b->[1] }
	map { [ $_, module_sort_key( $_ ) ] }
	@App::AckX::Preflight::Util::CARP_NOT
    ) {
	( my $path = "lib/$module.pm" ) =~ s< :: ></>smxg;
	open my $fh, '<', $path
	    or die "Unable to open $path: $!\n";
	warn "Processing $path\n";
	print "\n";
	while ( <$fh> ) {
	    s/ \A __END__ $/# /smx;
	    s/ \A (?= \s* (?: use | require ) \s+ App::AckX? \b ) /# /smx;
	    print;
	}
	close $fh;
    }
}

if ( $opt{o} ) {
    my $fh = select STDOUT;
    close $fh;
    if ( my ( undef, undef, $mode ) = stat $opt{o} ) {
	$mode = S_IMODE( $mode );
	$mode |= S_IXUSR | S_IXGRP | S_IXOTH;
	chmod $mode, $opt{o};
    }
}

sub module_sort_key {
    my ( $module ) = @_;
    local $_ = $module;
    # App::AckX::Preflight::Util must sort first.
    s/ \A App::AckX::Preflight::Util \z / /smx
	and return $_;
    # Syntax filters that begin with an underscore must sort before
    # syntax filters that do not.
    s/ (?<= \A App::AckX::Preflight::Syntax:: ) _ / /smx
	and return $_;
    # No other special cases.
    return $module;
}
__END__

=head1 TITLE

squash - Gather ackxp into a single file.

=head1 SYNOPSIS

 squash >ackxp
 squash `which ack` >ackxp
 squash -o ackxp
 squash -help
 squash -version

=head1 OPTIONS

=head2 -help

This option displays the documentation for this script. The script then
exits.

=head2 -o

 -o ackxp-standalone

This option specifies the output file. If specified as something other
than C<''> or C<'-'>, output will be to this file, which will have its
execute bits set if possible.

By default, or if specified as C<''> or C<'-'>, output is to standard
out.

=head2 -version

This option displays the version of this script. The script then exits.

=head1 DETAILS

This Perl script gathers all the components of F<ackxp> into a single
file, and writes that file to standard out. It is analogous to the
script of the same name that comes with L<App::Ack|App::Ack>.

This script should be run in the top-level C<App-AckX-Preflight>
directory.

It needs a copy of the single-file version of F<ack> to work with. The
path to this can be speified on the command line. If no F<ack> is
provided, L<File::Which|File::Which> is loaded and used to find
F<ack-standalone> or F<ack>, in that order. An exception is thrown if
F<ack> is defaulted and no default can be determined.

A copy of L<File::Which|File::Which> (which may or may not be current)
is provided in the F<inc/> directory of the distribution. This copy will
be used if an installed copy can not be found.

=head1 AUTHOR

Thomas R. Wyant, III F<wyant at cpan dot org>

=head1 COPYRIGHT AND LICENSE

Copyright (C) 2018 by Thomas R. Wyant, III

This program is free software; you can redistribute it and/or modify it
under the same terms as Perl 5.10.0. For more details, see the full text
of the licenses in the directory LICENSES.

This program is distributed in the hope that it will be useful, but
without any warranty; without even the implied warranty of
merchantability or fitness for a particular purpose.

=cut

# ex: set textwidth=72 :
